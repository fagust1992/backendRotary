te dejare unos componentes donde uso multer y quiero saber como ocupo
cloudinary en mi codigos ya tengo las credenciales dejo copia
de mi codigos

const express = require("express");
const router = express.Router();
const UserController = require("../controllers/user");
const multer = require("multer"); // Corrección aquí
const check = require("../Middleware/auth"); // Middleware

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/avatars/"); // Corrección aquí
  },
  filename: (req, file, cb) => {
    cb(null, "avatar-" + Date.now() + "-" + file.originalname);
  },
});
const uploads = multer({ storage });

// Definir Rutas

router.get("/prueba-usuario", check.auth, UserController.pruebaUser);
router.post("/register",UserController.register);
router.post("/login", UserController.login);
router.get("/profile/:id", UserController.profile);
router.get("/list/:page?", check.auth, UserController.list);
router.get("/avatar/:file", check.auth, UserController.avatar);
router.put("/update", check.auth, UserController.update);
router.post(
  "/upload",
  [check.auth, uploads.single("file0")],
  UserController.upload
);
router.delete("/delete/:id", check.auth, UserController.delete_user);
// Exportar router
module.exports = router;



//subir imagen
const upload = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(404).send({
        status: "error",
        message: "La petición no incluye la imagen",
      });
    }

    const imageName = req.file.filename;
    const extension = req.file.originalname.split(".").pop().toLowerCase();

    if (!["png", "jpg", "jpeg", "gif"].includes(extension)) {
      const filepath = req.file.path;
      try {
        fs.unlinkSync(filepath);
      } catch (error) {
        console.error("Error al eliminar el archivo:", error);
      }

      return res.status(400).json({
        status: "error",
        message: "La extensión del archivo no es válida",
      });
    }

    const userUpdate = await User.findByIdAndUpdate(
      req.user.id,
      { image: imageName },
      { new: true }
    );

    if (!userUpdate) {
      return res.status(500).send({
        status: "error",
        message: "Error en la subida de avatar",
      });
    }

    return res.status(200).send({
      status: "success",
      message: "Avatar subido correctamente",
      data: userUpdate,
    });

  } catch (error) {
    console.error("Error en la carga:", error);
    return res.status(500).send({
      status: "error",
      message: "Error interno del servidor",
    });
  }
};

const avatar = (req, res) => {
  const file = req.params.file;
  //Montar el path real de la imagen
  const filePath = "./uploads/avatars/" + file;
  // comprobar quer existe
  fs.stat(filePath, (err, exists) => {
    if (!exists) {
      return res.status(404).send({
        status: "error",
        message: "no existe la imagen",
      });
    }

    //devolver  un file
    return res.sendFile(path.resolve(filePath));
  });
};