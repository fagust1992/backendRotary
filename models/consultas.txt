te dejo mi codigo relacionados :
modelo
const { Schema, model } = require("mongoose");

const PublicationSchema = new Schema({
  user: {
    type: Schema.ObjectId,
    
    ref: "User",  // "User" corresponde a collecion base de datos

  },
  text: {
    type: String,
    required: true,
  },
  image: {
    type: String,
    default: "default.png",
  },

});

module.exports = model("Publication", PublicationSchema, "publications");





// subir imagen
const upload = async (req, res) => {
  try {
    const publicationId = req.params.id;
    console.log("Publication ID:", publicationId);

    if (!req.file) {
      return res.status(404).send({
        status: "error",
        message: "Petición no incluye la imagen",
      });
    }

    const image = req.file.originalname;
    console.log(image);

    // Extraemos la extensión del archivo
    const imageSplit = image.split(".");
    const extension = imageSplit[imageSplit.length - 1];

    // Comprobar que la extensión del archivo es válida
    if (!["png", "jpg", "jpeg", "gif"].includes(extension)) {
      const filePath = req.file.path;
      fs.unlinkSync(filePath); // Eliminar el archivo local si la extensión es inválida

      return res.status(400).send({
        status: "error",
        message: "Extensión del fichero inválida",
      });
    }

    // Configuración de Cloudinary
    cloudinary.config({
      cloud_name: process.env.cloud_name,
      api_key: process.env.api_key,
      api_secret: process.env.api_secret
    });

    // Subir la imagen a Cloudinary
    const result = await cloudinary.uploader.upload(req.file.path, {
      folder: "publications", // Usa una carpeta específica para publicaciones
      use_filename: true,
      unique_filename: false,
    });

    // Eliminar el archivo local después de subirlo
    fs.unlinkSync(req.file.path);

    // Actualizar la publicación con la URL de la imagen
    const publicationUpdated = await Publication.findOneAndUpdate(
      { user: req.user.id, _id: publicationId },
      { file: result.secure_url }, // Guardamos la URL de Cloudinary
      { new: true }
    );

    if (!publicationUpdated) {
      return res.status(500).send({
        status: "error",
        message: "Error en la subida de la publicación",
      });
    }

    return res.status(200).send({
      status: "success",
      publication: publicationUpdated,
      file: result.secure_url, // Retornamos la URL de la imagen subida
    });
  } catch (error) {
    console.error("Error:", error);
    return res.status(500).send({
      status: "error",
      message: "Error en la solicitud",
      error: error.message,
    });
  }
};

const media = (req, res) => {
  const file = req.params.file;

  // Construir la URL de la imagen en Cloudinary
  const imageUrl = `https://res.cloudinary.com/${process.env.cloud_name}/image/upload/publications/${file}`;

  // Verificar que la imagen existe en Cloudinary
  fetch(imageUrl)
    .then(response => {
      if (!response.ok) {
        return res.status(404).send({
          status: "error",
          message: "La imagen no existe en Cloudinary",
        });
      }

      // Responder con la URL de la imagen
      return res.status(200).send({
        status: "success",
        message: "Imagen encontrada",
        url: imageUrl,
      });
    })
    .catch(err => {
      console.error("Error al obtener la imagen:", err);
      return res.status(500).send({
        status: "error",
        message: "Error al obtener la imagen",
      });
    });
};
